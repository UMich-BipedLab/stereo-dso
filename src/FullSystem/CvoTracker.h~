#pragma once
 
#include "util/NumType.h"
#include <vector>
#include <cmath>
#include <Eigen/Dense>
#include "util/settings.h"
#include "OptimizationBackend/MatrixAccumulators.h"
#include "IOWrapper/Output3DWrapper.h"
#include "HessianBlocks.h"
#include "Cvo/rkhs_se3.hpp"


namespace dso
{
  class CvoTracker {
  public:
    EIGEN_MAKE_ALIGNED_OPERATOR_NEW;
    CvoTracker();
    CvoTracker(CalibHessian * Hcalib, int w, int h);
    ~CvoTracker();

    // two frame tracking
    bool trackNewestCvo ( // input: new frame
                         FrameHessian * newFrameHessian,
                         // output: constant motion
                         SE3 &lastToNew_output);
                         //AffLight &aff_g2l_out);

    // getter, setter
    bool setCurrRef(FrameHessian * ref) { currRef = ref;}
    FrameHessian * getCurrRef() {return currRef;}
    int getCurrRefId() {return currRef? currRef->shell->id : -1;}
    double getLastResiduals() {return lastResiduals;}

    // computer residual
    Vec6 calcRes(SE3 refToNew, float cutOffThreshold );

  private:
    cvo::rkhs_se3 * cvo_align;
    
    FrameHessian * currRef;

    Mat33f K;
    Mat33f Ki;
    float fx;
    float fy;
    float fxi;
    float fyi;
    float cx;
    float cy;
    float cxi;
    float cyi;
    int w;
    int h;


    // latest tracking residual
    double lastResiduals;       // track residual
    //double firstRMSE;
    
  };
  
}
